/*
 * ETAPI
 *
 * External Trilium API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zadam.apps@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateNoteDef {
    #[serde(rename = "parentNoteId")]
    pub parent_note_id: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "type")]
    pub _type: Type,
    /// this needs to be specified only for note types 'code', 'file', 'image'.
    #[serde(rename = "mime", skip_serializing_if = "Option::is_none")]
    pub mime: Option<String>,
    #[serde(rename = "content")]
    pub content: String,
    /// Position of the note in the parent. Normal ordering is 10, 20, 30 ...  So if you want to create a note on the first position, use e.g. 5, for second position 15, for last e.g. 1000000 
    #[serde(rename = "notePosition", skip_serializing_if = "Option::is_none")]
    pub note_position: Option<i32>,
    /// Prefix is branch (placement) specific title prefix for the note.  Let's say you have your note placed into two different places in the tree,  but you want to change the title a bit in one of the placements. For this you can use prefix. 
    #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// true if this note (as a folder) should appear expanded
    #[serde(rename = "isExpanded", skip_serializing_if = "Option::is_none")]
    pub is_expanded: Option<bool>,
    #[serde(rename = "noteId", skip_serializing_if = "Option::is_none")]
    pub note_id: Option<String>,
    #[serde(rename = "branchId", skip_serializing_if = "Option::is_none")]
    pub branch_id: Option<String>,
}

impl CreateNoteDef {
    pub fn new(parent_note_id: String, title: String, _type: Type, content: String) -> CreateNoteDef {
        CreateNoteDef {
            parent_note_id,
            title,
            _type,
            mime: None,
            content,
            note_position: None,
            prefix: None,
            is_expanded: None,
            note_id: None,
            branch_id: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "file")]
    File,
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "search")]
    Search,
    #[serde(rename = "book")]
    Book,
    #[serde(rename = "relation-map")]
    RelationMap,
    #[serde(rename = "render")]
    Render,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}

