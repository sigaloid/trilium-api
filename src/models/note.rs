/*
 * ETAPI
 *
 * External Trilium API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: zadam.apps@gmail.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Note {
    #[serde(rename = "noteId", skip_serializing_if = "Option::is_none")]
    pub note_id: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    #[serde(rename = "mime", skip_serializing_if = "Option::is_none")]
    pub mime: Option<String>,
    #[serde(rename = "isProtected", skip_serializing_if = "Option::is_none")]
    pub is_protected: Option<bool>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<crate::models::Attribute>>,
    #[serde(rename = "parentNoteIds", skip_serializing_if = "Option::is_none")]
    pub parent_note_ids: Option<Vec<String>>,
    #[serde(rename = "childNoteIds", skip_serializing_if = "Option::is_none")]
    pub child_note_ids: Option<Vec<String>>,
    #[serde(rename = "parentBranchIds", skip_serializing_if = "Option::is_none")]
    pub parent_branch_ids: Option<Vec<String>>,
    #[serde(rename = "childBranchIds", skip_serializing_if = "Option::is_none")]
    pub child_branch_ids: Option<Vec<String>>,
    #[serde(rename = "dateCreated", skip_serializing_if = "Option::is_none")]
    pub date_created: Option<String>,
    #[serde(rename = "dateModified", skip_serializing_if = "Option::is_none")]
    pub date_modified: Option<String>,
    #[serde(rename = "utcDateCreated", skip_serializing_if = "Option::is_none")]
    pub utc_date_created: Option<String>,
    #[serde(rename = "utcDateModified", skip_serializing_if = "Option::is_none")]
    pub utc_date_modified: Option<String>,
}

impl Note {
    pub fn new() -> Note {
        Note {
            note_id: None,
            title: None,
            _type: None,
            mime: None,
            is_protected: None,
            attributes: None,
            parent_note_ids: None,
            child_note_ids: None,
            parent_branch_ids: None,
            child_branch_ids: None,
            date_created: None,
            date_modified: None,
            utc_date_created: None,
            utc_date_modified: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "code")]
    Code,
    #[serde(rename = "render")]
    Render,
    #[serde(rename = "file")]
    File,
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "search")]
    Search,
    #[serde(rename = "relation-map")]
    RelationMap,
    #[serde(rename = "book")]
    Book,
    #[serde(rename = "note-map")]
    NoteMap,
    #[serde(rename = "mermaid")]
    Mermaid,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}

